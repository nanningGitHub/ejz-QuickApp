<template>
    <div class="page">
        <div class="flex_page">
            <div class="forget_box">
                <div class="phone_box">
                    <input type="number" value="{{phoneNumber}}" placeholder="请输入11位手机号码" class="phone_nub" onchange="onInputPhone" />
                </div>
                <div class="code_box">
                    <input type="number" value="{{validateCode}}" placeholder="请输入验证码" class="code_nub" onchange="onInputCode" />
                    <text class="code_btn" disabled="{{disabled}}" onclick="backCode">{{codebtn}}</text>
                </div>
                <div class="password_box">
                    <input type="password" value="{{password}}" placeholder="请输入密码 (6-16位数字字母组合)" class="password_nub" onchange="onInputPassword"
                    />
                </div>
                <div class="forget_btn" onclick="forget">
                    <text class="forget_btn_text">重置密码</text>
                </div>
            </div>
        </div>
    </div>
</template>
<style lang="less">
    @import './less/index.css';
</style>
<script>
    import router from '@system.router'
    import {
        backCode,
        forget
    } from '../Common/Api/user'
    export default {
        data: {
            codebtn: '获取验证码',
            currentTime: 61,
            disabled: false,
            phoneNumber: '',
            validateCode: '',
            password: ''
        },
        onInputPhone({
            value
        }) {
            this.phoneNumber = value;
        },
        onInputCode({
            value
        }) {
            this.validateCode = value;
        },
        onInputPassword({
            value
        }) {
            this.password = value;
        },
        backCode() {
            let RegExphone = /^[1][3,4,5,7,8,9][0-9]{9}$/;
            if (!RegExphone.test(this.phoneNumber)) {
                this.$app.$def.prompt.showToast({
                    message: '请输入手机号码'
                })
            } else {
                backCode(this.phoneNumber)
                    .then((data) => {
                        if (data.code !== 0) {
                            this.$app.$def.prompt.showToast({
                                message: data.msg
                            })
                        } else {
                            var that = this;
                            let interval = setInterval(function () {
                                that.currentTime--;
                                that.codebtn = that.currentTime + '秒'
                                if (that.currentTime <= 0) {
                                    clearInterval(interval)
                                    that.codebtn = "重新发送";
                                    that.currentTime = '61';
                                    that.disabled = "false"
                                }
                            }, 1000)
                        }

                    })
                    .catch((err) => {
                        this.$app.$def.prompt.showToast({
                            message: "请检查您的网络"
                        })
                    })
            }
        },
        forget() {
            let RegExphone = /^[1][3,4,5,7,8,9][0-9]{9}$/;
            let RegExpCode = /^\d{6}$/;
            let RegExpPassword = /^(?![0-9]+$)(?![a-zA-Z]+$)[0-9A-Za-z]{6,16}$/;
            if (!RegExphone.test(this.phoneNumber)) {
                this.$app.$def.prompt.showToast({
                    message: '请输入手机号码'
                })
            } else if (!RegExpCode.test(this.validateCode)) {
                this.$app.$def.prompt.showToast({
                    message: '请输入验证码'
                })
            } else if (!RegExpPassword.test(this.password)) {
                this.$app.$def.prompt.showToast({
                    message: '请提高密码安全性'
                })
            } else {
                forget(this.phoneNumber, this.validateCode, this.password)
                    .then((data) => {
                        if (data.code !== 0) {
                            this.$app.$def.prompt.showToast({
                                message: data.msg
                            })
                        } else {
                            router.back()
                        }
                    })
                    .catch((err) => {
                        this.$app.$def.prompt.showToast({
                            message: "请检查您的网络"
                        })
                    })
            }
        }
    }
</script>